services:
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
      args:
        # Backend API server - used at build time to create the bundle
        PUBLIC_SERVER_URL: http://localhost:3035
    ports:
      - 8085:80
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      test:
        ["CMD-SHELL", "curl --fail --silent http://localhost:80/healthcheck"]
    depends_on:
      - server

  server:
    build:
      context: .
      dockerfile: ./apps/server/Dockerfile
    ports:
      - 3035:3000
    environment:
      - SERVER_AUTH_SECRET=${SERVER_AUTH_SECRET:-please_change_this_in_production}
      - SERVER_POSTGRES_URL=postgres://postgres:postgres@db:5432/postgres
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=3000
      - PUBLIC_WEB_URL=http://localhost:8085
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      test:
        [
          "CMD-SHELL",
          "wget --quiet --spider http://$$SERVER_HOST:$$SERVER_PORT/healthcheck",
        ]
    depends_on:
      - postgres

  postgres:
    image: docker.io/library/postgres:16.2-alpine
    volumes:
      - type: volume
        source: postgresql-data
        target: /var/lib/postgresql/data
    environment:
      POSTGRES_DB:
      POSTGRES_USER:
      POSTGRES_PASSWORD:
    ports:
      - target: 5432
        published: ${POSTGRES_PORT}
        protocol: tcp
    command: ["postgres", "-c", "log_statement=all"]
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
    restart: unless-stopped

  redis:
    image: docker.io/library/redis:7-alpine
    volumes:
      - type: volume
        source: redis-data
        target: /data
    ports:
      - target: 6379
        published: ${REDIS_PORT}
        protocol: tcp
    restart: unless-stopped

volumes:
  postgresql-data:
    driver: local
  redis-data:
    driver: local
